# Copyright(c) 2016 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its subsidiaries and/or its affiliates and/or their licensors.
# Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Software AG

plugins:
  FileTransport:
    classpath:
      - ${APAMA_WORK}/lib/file-transport-plugins.jar
    class: com.softwareag.samples.FileTransport
   
  RegexCodec:
    classpath: ${APAMA_WORK}/lib/regex-codec-sample.jar
    class: com.softwareag.samples.RegexCodec


startChains:
  testChain:
    - apama.eventMap:
        defaultEventType: com.softwareag.samples.Test
        subscribeChannels:
          - data

    - RegexCodec:
        regex: "([0-9]+)"
        repl: "numberTowardsHost<$1>"
        direction: towardsHost
        keys: ["payload"]

    - RegexCodec:
        regex: "([0-9]+)"
        repl: "numberTowardsTransport<$1>"
        direction: towardsTransport
        keys: ["payload.value"]

    # this instance is not actually used by this testcase, but useful to demo the supported functionality
    - RegexCodec: 
        regex: "(group1)[a-z](group2)"
        repl: "got '$1' and '$2'"
        flags: # any constant defined on the java.util.regex.Pattern class
         - CASE_INSENSITIVE
         - MULTILINE
        #- LITERAL
        keys: # any primitive value inside a map can be specified (including values from a map inside a list)
         - metadata.myheader1
         - payload.map1key.map2key.map3keyX
         - payload.map1key.map2key.map3keyY
        direction: bidirectional
        hostMessageTypes: # applies to all types if not specified
         - com.softwareag.samples.MyEvent
        
    - FileTransport:
        hostToFile: output.txt
        fileToHost: input.txt
